//関数スコープは関数に囲まれた{}の中のこと。
function a (){
  let b = 0;
  console.log(b);
}
a();
// console.log(b);
//変数bは関数スコープの中のみでしか呼び出せないのでエラーになる。この場合はスコープの外になるのでbの変数を持って来れない。実行コードからその変数がjみえるか見えないかが肝になってくる。

//ブロックスコープについてみる。{}に囲まれた範囲をブロックスコープという。関数宣言が前にない。
//使用する際は変数の宣言をletまたはconstを使用しないといけない。
//それ以外のvarを使用するとブロックスコープが生成されない。　

{
  let c = 1;
  // const c = 1;　これでも外に出すエラーになる。
  // var c = 1;とするとブロックスコープ外に出してもエラーが出ないようになる。意図しない挙動を取るので非推奨。
  console.log(c);

  // function d (){
    // console.log(' d is called');
  // }//関数宣言もブロックスコープが無視されるので注意。
const d = function () {};//とするとconst扱いになるので関数宣言をブロックスコープが有効になる。
//ブロックスコープはifやfor文と一緒に生成されるので注意する。
//if() {}というようにする。
}
// console.log(c);// エラーが出る。　
// d();


//スコープと実行コンテキストの関係。
//実行コンテキストはコードが実行される状況で、スコープは実行中のコードから見える範囲。
//これはグローバルコンテキスト内では変数や関数はグローバルスコープと言える。
//その中にはスクリプトスコープも含まれる。
//関数コンテキスト内で実行されているのが関数スコープ
//これがコンテキストと関数の関係。
