//レキシカルスコープは、プログラムでは、どこで何を書いているかという意味　
//ソースコードが記載している場所ということ。　
//レキシカルスコープは、コードを各場所によって参照できる変数が変わるスコープのこと。
//コードを記述した時点で決定するため静的スコープという

// let a = 2;
// function fn1() {
//   let b = 1;
//   function fn2 () {
//     let c = 3;
//   }
//   fn2();
// }
// fn1();
//多階層になっている。
///fn1にブレイクポイントおいてやると、関数一での処理が止まるので、スクリプトにaがあるのがわかる。
//関数スコープの中にlocalのスコープにbが入っている。
//関数のfn2が参照可能となっている。
//watchに変数と入れて値が出ると参照可能。
//consoleで打っても大丈夫
// fn2をブレイクにして見ていくと、グローバルスクリプトとスクリプトスコープのaはどこでも使用可能。
//cはundefinedとなる。
let a = 2;
function fn1() {
  let b = 1;
  function fn2 () {
    let c = 3;
    console.log(b); //ここをブレイクポイントにするとclosureというものがsourceに出てきて、b＝1が表示される。
  }
  fn2();
}
fn1();
//関数cの外部スコープである変数bをcで参照することができる。
//関数fn2をfn1から出してbを参照すると参照できない。関数fn1以外でbが参照できない。これがレキシカルスコープ
// fn1(){}の中であれば参照できる。
// a fn1はグローバルスコープ
// fn1の関数スコープの中で、b,fn2が参照可能なもの。fn2のスコープの中では参照可能なcが設定される事になる。
//この時fn1の外部スコープであるグローバルスコープが参照可能、fn2スコープからはfn2スコープとグローバルスコープが参照できる。　
// 自身のスコープより外側のスコープは参照可能になる。外部変数というのがレキシカルスコープになる。


　