//WeakMap・・弱い参照でオブジェクトを保持するコレクション
//キーは必ずオブジェクト
const wm = new WeakMap();
//weakmapのオブジェクトがインスタンス化される。
//これに対して値を設定する。setを使用する。
// const o = {};
let  o = {};
wm.set( o, 'value1');
//keyがobjectであるものをwmにセットする。　
console.log(wm.get(o));
//こうするとオブジェクトと値を対で管理することができる。　
//mapとweakmapの違い。
//weakmapの場合は、keyで使用しているオブジェクトが削除された場合は、weakmapのkeyとvalueのペアも削除されるようになる。
//削除は定期的に自動的にJSにされる。

//o =nullとなった場合
// o = null;
// o = {}; //null後にオブジェクトを設定しても下で定義したオブジェクトと上で定義したオブジェクト（最初に設定したオブジェクト）のメモリは別のものになるので、一度変数に対して異なる値を入れると上で定義したオブジェクトは二度と取得できないので注意が必要。setのオブジェクトとは二度と使用されないものになるので削除される。
//これをガベージコレクションという。参照が不可能な関数や変数を定期的に削除するということを行っている。
// 通常のMapとは違い関わりが切れた時は、削除される。keyからvalueへの値の保持の力が弱い。weakmapは弱参照を用いたものとなる。
// console.log(wm.get(o));

console.log(wm.has(o));
//hasはoがwmに存在するかどうかを判断する時に使用する。
console.log(wm.delete(o));
console.log(wm.get(o)); //削除されているのが確認できる。
//こうすると意図的に削除できる。

//weakmapはfor ofの反復処理をすることができない。反復処理が必要ならマップを使用する。
