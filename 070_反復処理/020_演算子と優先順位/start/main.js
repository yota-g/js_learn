//演算子と優先順位についてみる。
//演算子・・値（オペランド）を元に処理を行い、結果を返す記号
//演算子によって処理される値のことをオペランドという。
//演算子は普通に書く文には気にならない。
//演算子の動きを理解するのが大切で、なぜなら使用すると結果が必ず返ってくるから。
//演算子は値を返すということを覚えておく。
//演算子の優先順位を気にすること
// let a = 1 + 2 * 3; //*の方が先に計算される。 ()をつけるとそこの優先が高いので計算結果が変わる。
// console.log(a);
let a = 0;
let b = ++a;
//インクリメント演算子(++)は後につけるか先につけるかで内容が変わる。
//後につけるとaを表示した後に+1される。bは0と表示される。
//aは1になる。
//前方につけて++aとするとaに+1されたbを表示するので1が表示される。
console.log(b);

// let b ; 
// a = b = a + 1;//これが++aの処理の中身
//=が二つ並んでいる場合は左から評価を行っていくが、代入演算子は右から左となるので、
//右側が評価される事になる。
//１がbに格納されて、bがaに格納される。
// console.log(a,b);　
//結果としてaとbが1になる。　

//後方にインクリメント演算子をつけた場合 a++
//グループ化で演算子の処理を変えている。
a = (b = a) + 1;
console.log( a,b);
//グループ化をすることでa =bがまず評価されてb=0が設定される。
//代入演算子が返却する結果は右辺になるので,
// 0+1になるのでaが1になる。
//後方のインクリメント演算子を表現することができる。

function fn () {
  let a = 0;
  return a ++;
  //この場合だと0が表示される。
  //(a = a )+1
}

console.log(!fn() * 5);
//!fn()にすると関数の戻り値が0なので、その反対にすると1が返ってくる。
//falseをtrueにすると思って１にすることになる。trueがオペラントで返ってきているけど、型式の変更が行われて、結果として、計算できるようにtrueが1になって計算できるようになる。
//!は*よりも優先順位が高い。 !(fn() * 5)とすると0を否定するのでtrueがオペラントとして返ってくる。
//演算子の優先順位で式の結果がどんなのかを予測することができる。