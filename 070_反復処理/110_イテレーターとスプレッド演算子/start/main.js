//スプレッド演算子・・反復可能や列挙可能オブジェクトの展開を行う。
//主に配列を展開するときに使用する。
//展開した配列を新しい配列に入れて、変数に代入するときに使用する。
//配列だけではなくてオブジェクトでも使用できる。
//スプレッド演算子は、関数の仮引数で使用された場合はレストパラメータ、残余引数が入っている。
//このようにしておくと渡ってきた実引数が配列にまとめられて、使用できることとなる。
//可変調の変数などを撮るときにこのような記述を行うことがある。
//実引数に渡された変数を配列にまとめる。
// function(...args)などの時に使用する。

//このスプレッド演算子がどのようにイテレーターと関係してくるか。
//スプレッド演算子は、イテレーターの操作に従う。
//カスタムイテレータとして独自にイテレータを作成した場合には、スプレッド演算子はそのイテレータの情報を元に配列の展開などを行う。
//コードで確認する。
//スプレッド演算子の確認
const arry1 = [1,2,3,4,5];
const arry2 = [...arry1];
//とするとスプレッド演算子によってarry2にarry1が格納されてarry2になる。
console.log(arry2);
//arry1と同じ配列が表示されている。
//新しい配列となっている。
//arry1とarry2は別の配列になる。等価性はfalseになる。
arry2.push(6)
//としてもarry1に影響はない。
console.log(arry1 === arry2);
console.log(arry1);
console.log(arry2);
//スプレッド演算子で新しい配列を作成していることを理解しておく。これはプログラムを作成する上で必要な知識。
//スプレッド演算子を使用する上で可変変数を入れた後に6を入れると6が追加されるようになる。
const arry3 = [0, ...arry1, 6];
//前と後ろに数字を入れると配列に追加することができる。このように配列を操作することができる。
console.log(arry3);
arry3.push(6);
console.log(arry3);
//これが基本的なスプレッド演算子の使用方法

//レストパラメーターのことについて確認する。
//sum の関数に仮引数にレストパラメータを使用する。　こう定義すると渡ってきた引数がargsという変数名の配列になる。

function sum(...args) {
  let ret = 0;
  for (let v of args){
    // console.log(v);渡ってくるものを表示する。
    // ret = ret + v;
    ret += v;
    //このようにすると最初のretは0なので0+vなのでそれが新しいretの数として設定されて計算されていって合計されるという事になる。
  }
  return ret;//合計された結果がresultに返される。
}

const result = sum(1,2,3,4);
//この引数が渡ってきた時に引数がargsの配列に格納される。
console.log(result);
//可変調の引数を取る時にレストパラメータで配列に直してあげる書き方があることを理解しておく。

//ここからイテレーターとの関係について確認する。
const obj1 = {
  prop1: 'value1',
  prop2: 'value2',
  prop3: 'value3'
}
//オブジェクトを配列に直したい時
// const arry4 = [...obj1]; //そのまま配列にしようとするとnot iterabelエラーが表示される
//それではオブジェクトのプロトタイプについてiteratorを追加すると、
Object.prototype[Symbol.iterator] = function* () {
  for ( let key in this) {
    yield [key, this[key]];
  }
}

const arry4 = [...obj1];
console.log(arry4);
//とするとエラーがなくなり配列で表示される
//新しいスプレッド演算子で配列を格納することができる。
//配列の中でスプレッド演算子を入れると、Symbolのiteratorに準拠する。
//これをオブジェクトのリテラルで囲むと挙動が変わる。
const arry5 = {...obj1}; // この場合はイテレーターを使用するのではなく、オブジェクトをそのまま格納したオブジェクトに返しているだけ。　シンボルのイテレーターはいらない。 
console.log(arry5);