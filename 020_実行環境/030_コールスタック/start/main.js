function a() {
}
function b() {
    a();
}
function c() {
    b();
}
c();
// コールスタック・・実行中のコードがたどってきたコンテキストの積み合わせ。
//cの関数が実行されてその中でbが実行されてaがじっこされる
//その際にはグローバルコンテキストが実行されて、cの関数コンテキストが実行されて、そしてb の関数コンテキストが実行されて,aのコンテキストが関数生成される。　これがコーススタック。
//実行中のコンテキストはaで常に一番上に積み上げられているものが実行中のコンテキストになる。

//aの処理が終わるとbのコンテキストに移ってそれが終わるとbのコンテキストが消滅して、cにうつってc の処理が終わるとcのコンテキストが消滅してグローバルの処理が完了するとグローバルも消滅する。

//開発ページで見れるsourcesのmain.jsのページのcall stackの部分でanonymousと表示されている部分はグローバルコンテキストのことを表している。この時点では、グローバルコンテキストには名前がついていない。
//今回はcの処理を止めている。それでステップインしていくとJSでの処理がどのような順序でしているかをコールスタックで表している。
//ブラウザからでもわかる。コンテキストの状況を確認することができる。scopeで確認ができる。
//ステップアウトするとたどってきたところに戻っていくことができる。

//コールスタックの仕組みは、LIFO後入れ出し法。
//JSはLIFOでどのように実行されてきたかを確認したかを確認することができる。　

