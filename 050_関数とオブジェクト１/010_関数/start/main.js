//関数 
function fn ( a, b = 1 ) {
  // console.log( arguments);
  console.log(a,b);
  return a ;
}

// const fn = function fn ( a, b) {
//   console.log(a,b);
// }　これで重複を避けられる。
//aを省略することはできないが、bを省略するとundefinedが表示される。
// bだけ渡したい場合はnullなどをaに渡してあげると渡すことができる。
//引数が２つのものに対して１つだけ渡してもJSは実行することができる。
//このときは2つめの引数はundefinedとなる。引数の順番で渡ってくる引数が決まるので注意が必要。
//jsの場合、関数名が重複していた場合は、後から宣言された関数が使用されるので注意が必要。
// function fn ( a, b) {
//   console.log(100);
// }
//この場合は、100が上のfn(0,1)の値として表示される。この場合はエラーがでないので注意すること。後で宣言されたものが使用される。
fn( 0, 1 ) ;
//言語によって引数の数で違う関数にできる言語もあるが、JSの場合は引数の数で関数の違いは区別されないので、関数名のみで関数の呼び出し先を決定する事になる。
//この点は注意が必要。
//関数の重複を避けたい場合は、const fn = というように関数を変数に入れることで同じ名前が作成されるとエラーが出るようにできるのでそのように設定しておく方法もある。

//関数式をする場合に関数名を宣言しておいてもエラーはでない。基本的には無名でするが、問題ない。

//関数の引数にデフォルト値を設定できる。
fn(2);
//bがデフォルト値で表示される。
fn(1, null)
//引数がnullの場合はそのままnullが表示される。
fn(1, undefined);
//undefinedの場合は、初期値が優先される。 undefinedはプログラムが自動的に設定する値で意図的に変数を空で初期化したい場合はnullで設定する必要がある。

// let c = undefined;
//このような設定方法はしない。
//undefinedとするなら
// let c;　という宣言の仕方はあるが、undefinedと記載することはないその場合はnullを使用する。

//argumentsに関して、関数コンテキストで自動的に生成されるもの。
//自分では定義しない。　argumentsはオブジェクトで呼び出しに渡された実引数が渡ってくることになる。
//実引数がそのままargumentsに渡されている。　
//関数を引数なしで設定して、使用する際に引数を入れて、argumentsを使用して、arguments[0] , arguments[1]とすることで、引数のように使用することができる。
//argumentsに実引数が渡ってくるということがわかる。
//argumentsは渡す引数の数が決まっていない時に使用されることがある。
//引数が決まっていないときは、仮引数を合わせることができないので、argumentsというオブジェクトからループを使用して、引数を取得する場合がある。
//その用途でも最近は使われなくなっていて、restパラメータという演算子が導入された。
//可変調にしたい場合はrestパラメータ ....argsというものを使用すると、配列になった引数が格納される事になるが、配列みたいに便利に値を操作できない。基本的には、restパラメータで可変長のもの処理している。

//returnについてみる。 関数の戻り値。
let c = fn(4,null); //functionの中にconsoleがあるので表示される。ない場合は、　consoleを使用してreturnのみを表示することができる。
console.log(c); //returnがない場合はundefinedが表示される。
console.log(fn(3,9)); //この場合はfnの結果とreturnの結果を両方表示する。
