//コールバック関数。他の関数に引数として渡される関数。

// function hello () {
//   console.log('hello');
// }

// function bye () {
//   console.log('bye');
// }

// function fn (cb) {
//   cb();
// }

// fn(hello);
// fn(bye);
//こうすることでfn関数にhelloが渡ってくるのでfnでhelloが実行される。
//これがコールバック関数。
//関数がオブジェクトなので、関数を引数として渡すことも可能。
//cb();の()は実行可能なオブジェクトを実行するということなので、fnに渡されたcbがその時点で実行される事になる。　
//fnに渡す関数をコールバック関数とよび、呼び出された関数の中でコールバック関数は実行されるということを覚えておく。

//この場合は、関数の実のみ。
//一般的には関数の実行だけでなくて何らか他の処理を持っている場合が多い。
//コールバック関数に引数がある場合に関して、

function hello (name) {
    console.log('hello' + name);
  }
  
  function bye () {
    console.log('bye');
  }
  
  function fn (cb) {
    // cb('Tom');
    cb('Tom');
    //引数を入れてもコールバック関数の方で引数を設けていなければエラーにもならず、単に表示されるだけになる。
    //引数があれば代入されて表示される。
  }
  
  fn(hello);//helloに引数を入れて代入してもエラーになるので注意。
  fn(bye);
//コールバック関数の場合は、無名関数使用することもできる。
fn(function (name) {
  console.log('Hi ' + name)
})
//関数自体がオブジェクトなので、オブジェクトを他の関数の実引数として渡している。
//そして渡した先の関数では()を使用することで、関数が実行され、そこに引数があれば渡されたコールバック関数の引数として使用される。　
//よく使用されるJSのコールバック関数を確認する。

setTimeout(hello,  1000);  //helloの値に何も渡されないのでundefinedと表示される。
//この関数はJSエンジンによって準備されるwebAPIの一つだが、第一引数にコールバック関数をとる。
//こうすることで2秒待ってからhello関数が実行される。
// setTimeout( fn(hello) ,  5000); //この場合コールバック関数の中にコールバック関数を引数にとることは可能。引数を渡すと固定されてしまう。
// setTimeout(hello('alice'), 2000); //こっちも固定される。

//setTimeoutは何m秒待つかというもの。
//今回はhelloを渡した。関数を第一引数に待つ時間を第二引数に渡すと汎用的に使用できる。
//部品かして、それにコールバック関数を入れることで使用できるようにすることで汎用化することができる。
//コールバック関数で一部を抜き出すことでコールバックはよく使用される。