//関数コンテキストのthisを思い出す。 
//JSエンジン内で設定され関数ないで使用することができる。
//グローバルコンテキストでもthisは使用できるが、主に関数コンテキストでthisをよく使用する。
//thisは呼び出し元のオブジェクトへの参照を保持するキーワード。

const person = {
    name: 'Tom',
    hello: function() {
        console.log('Hello' + this.name);
        //このthisはオブジェクトのpersonを参照する事になるので、person.name 'Tom'という事になる。
        //thisをpersonと変更しても実行可能。
        //オブジェクトの外にある変数がレキシカルスコープになっているから、personという実行行からレキシカルスコープからpersonオブジェクトが見つかるので実行が無事に可能となる。
        //person.nameというような書き方は基本オブジェクトの中では使用しない。
    }
}

person.hello();
//このようにperson というオブジェクトの中の関数が実行された時のhello内のthisはpersonを示す。
//hello というメソッドを()で実行するという意味。
//personというオブジェクトを参照して、hello というメソッドに参照が向いて、そして、helloに実行がむくという事になる。
//オブジェクトを呼んでからhelloというメソッドを呼ぶという手続きが呼び出しもととなる。
//直接helloが呼び出されたときは、呼び出しもとがpersonではなくなる。　
// personを探してから、personの中のhelloメソッドを呼び出すとperosnのオブジェクトとなる。

//実行コンテキストによって、thisの参照先は変わる。
//グローバルコンテキスト、関数コンテキスト、evalコンテキストがある。
//一般的には関数コンテキストによってthisの参照先が変わるので、呼ばれた参照先によって、thisの参照先が変わる。
// thisは呼び出し元オブジェクトの参照を保持する。






