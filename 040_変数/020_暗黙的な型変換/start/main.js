//暗黙的な型変換・・・変数が呼ばれた状況によって変数の型が自動的に変換。
//文字列が状況によって数値に変換されること。
//JSは動的型つけ言語と言って、変数宣言時の型の宣言はなし、変数を使用する状況によって、変数の方が変更される。
//プログラミング言語による型宣言の違い。

//静的型付け言語の場合は、変数宣言時の型の宣言あり、また、変数を使用する状況によらず常に同じ型を保持。
//c やjavaで整数値を宣言する場合は、int a = 0;で宣言をする。
//型が厳密になるために常に同じ型を保持する。

//プログラミング言語によって型宣言に違いが出るので注意。
//動的のメリット　記述量が少なくなる。小規模の開発だと便利。大きくなると型がどうなっているかが重要になるので静的型付け言語の方がいい。メンテナンスがしやすい。
//型があらかじめ決まっているので、プログラムの実行時のパフォーマンスがよくなる。

let a  = 0; 
console.log(typeof a );
//numberと型が表示される。

function printTypeAndValue (val) {
  console.log(typeof val, val);
}

let b = '1' + a;
// let b  = a + '1'; //結果は01
printTypeAndValue(b);
//データ型が違う場合にはどちらかの型に統一してから+の演算子が使用される。
//文字列の方が優先される。 +の場合は文字列の結合と数値の演算で使用されるので、文字列が優先されている。

let c = 15 - b;
printTypeAndValue(c);
//この場合はnum型が優先される。 -は数値の演算にしか使用されないのでbの文字列が数値に変換される。

let d = c - null;
printTypeAndValue(d);
//nullが数値の0に変更されるのでcの値がまんま表示される。

let e = d - true;
printTypeAndValue(e);
// この場合、trueは真偽値で数値との演算に使用された場合、　数値の1とみなされる。
//JSの場合は明示的に型を指定することができる。
let f = parseInt('1') + a ;
printTypeAndValue(f)

let g = '1'  + true;
printTypeAndValue(g);
//文字列扱いになる。
 //異なる型同士の演算はバグを産むことになるので注意が必要。

