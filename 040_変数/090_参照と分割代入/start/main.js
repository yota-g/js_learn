//参照と分割代入
//分割代入とは、let { a, b } = object;
//オブジェクトから特定のプロパティを抽出して宣言を行うもの。
//オブジェクトに含まれるaとbが変数a とbの初期値として代入される。

//分割代入。
// const a = { prop : 'hello' }
//オブジェクトの参照となる。
//ここからオブジェクトのaをpropという新しい変数で宣言すると
// let { prop } =  a;
// この場合objectのaに入っているpropが参照している値がlet propに格納されるようになる。
//その場合は、helloという文字列がコピーされて、それを変数propからの参照になる。
//objectとは切り離された変数で宣言されてその変数がhelloという値を持っている事になる。　
//変数propの値を変更したところで変数prop の値の参照先が変更されるだけ。
//オブジェクトには影響しない。　

const a = {
  prop: 0,
  value : 2
}

// let { c, b } = a;
//分割代入するときは、プロパティの名前と変数の名前を基本的には一致させる必要がある。
// console.log( c, b);
//プロパティの値と変数の名前が一致していないとundefinedとなる。参照先がわからなくなるから。　
// let { prop } = a;
// console.log( prop);
//propのプロパティの値が変数propへ分割代入されている。

let { prop , value} = a;
console.log( prop, value );
//両方ともコピーできている。
prop = 4;
console.log( prop , a);
//こうすると変数のpropの値だけが変更されていることがわかる。

// 変数名を変えたいときは、
// let { prop : b , value: c} = a;
// console.log( b ,c );
 // とオブジェクトのようにすることで変数名を変更することができる。


//関数と絡めてみる。
function fn (obj) {
  let { prop } = obj;
  prop = 1;
  console.log(obj, prop);
}

fn(a);

// function fn ({prop}) {
//   prop = 1;
//   console.log(a , prop);
//objは設定されていないので違いを確認するなら代入元の変数名を記載することで確認できる。
// }
// このように引数に分割部分を入れることで簡略化することができる。
//渡ってきたオブジェクトがその引数の時点で分割代入で展開されて、propという変数が使用できるようになる。　
//オブジェクトをとる引数で分割代入で特定のプロパティのみを使用するということはよくあること。
//オブジェクトの中身は変更されないということを理解しておく。
//代入された時点でpropという変数に代入されて値がコピーされているから。
//オブジェクトが多階層だった場合を考える。

const d = {
  prop1 : {
    prop2: 0
  }
}
//これを分割代入するとどうなるのか。
let { prop1 } = d;
console.log(prop1);
//prop2をもったオブジェクトになる。
//変数prop1にはprop2の参照が保持されているので、prop2の値を変数prop1で変更すると元のprop2の値まで変更されてしまう。
prop1.prop2 = 1;
console.log(d , prop1);
//dのprop2の値まで変更されてしまう。
//分割代入先の値がオブジェクトだった場合、参照がコピーされるので、変数の値を変更すると分割元の値も変更してしまうことを覚えておくこと。

