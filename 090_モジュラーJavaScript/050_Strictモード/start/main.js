// 'use strict'
// a = 0;
// function f() {
//   a =1;
//   console.log(a);
//   console.log(window.a);
// }
// console.log(a);
// console.log(window.a);
//aの値が表示される。　use strictを入れるとエラーが発生する。なぜエラーが発生するかというと、キーワードを使わずに変数を定義するとwindowオブジェクトに対して、aというプロパティを設定するという意味になる。use strictをコメントアウトして確認すると確認できる。
//また、関数にaをそのまま設定しても同様にwindowに設定される。
// これは思わぬバグになりかねないので、関数スコープとして使いたくてもグローバルスコープで設定してしまっているなどの現象が起き、開発者エラーが出ないので開発者も気付きにくい。use strictをつけるとエラーになるのでバグが発生しにくくなるように制限を加えることができる。ファイルレベルで使用したい時はファイルの先頭に、関数レベルで使用したい時は関数内の先頭に設定するといい。
// f();

//strictを使用したセキュアなJSの実行
//jsのthisに主に関わってくる。
'use strict'
function fn () {
  return this;
  //use strictがなければこのthisはwindowオブジェクトを指す事になる。
  //use strictがあるとundefinedと返ってくる。
  //use strictを使用した場合、関数ないでthisを使用した場合にwindowオブジェクトを返すことは無駄な脆弱性を生み出しかねないという判断の元undefinedが変えるようになっている。なるべくコードをセキュアに保つということのもとJSの機能を抑制している。
  //thisはプリミティブ型の値もとることができるようになる。
}
// console.log(fn());
console.log(fn.call(2)); //こうするとuse strict適用中は2がthisに設定される。 strictモードを外すと、オブジェクトでラップされたプリミティブの2が返ってくるようになる。
//文字列でもそうなる。strictになるとthisはプリミティブ型の値を取ることができる。